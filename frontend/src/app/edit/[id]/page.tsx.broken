'use client';

import { useState, useEffect } from 'react';
import { ArrowLeft, Upload, Image, Settings, Play, Youtube, X } from 'lucide-react';
import { useRouter, useParams } from 'next/navigation';
import dynamic from 'next/dynamic';
import DragDropUpload from '@/components/DragDropUpload';
import BulkYouTubeUpload from '@/components/forms/BulkYouTubeUpload';
import YouTubeThumbnailUpload from '@/components/forms/YouTubeThumbnailUpload';
import WorldCupPreview from '@/components/WorldCupPreview';
import TournamentSettings from '@/components/TournamentSettings';
import TournamentCreationCelebration from '@/components/TournamentCreationCelebration';
import ProtectedRoute from '@/components/ProtectedRoute';

// Dynamic import for heavy components
const ImageCropper = dynamic(() => import('@/components/ImageCropper'), {
  ssr: false,
  loading: () => (
    <div className="flex items-center justify-center p-8">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"></div>
      <span className="ml-3">Ïù¥ÎØ∏ÏßÄ Ìé∏ÏßëÍ∏∞ Î°úÎî© Ï§ë...</span>
    </div>
  ),
});
import { getWorldCupById } from '@/utils/storage';
import { getWorldCupById as getSupabaseWorldCupById } from '@/utils/supabaseData';
import { generateAutoThumbnail } from '@/utils/thumbnailGenerator';
import { saveWorldCupToSupabase, updateWorldCupInSupabase } from '@/utils/supabaseWorldCup';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/contexts/AuthContext';
import { formatTimeRange } from '@/utils/timeFormat';
import type { WorldCupMediaItem } from '@/types/media';
// Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏ Ìï®Ïàò (Supabase AuthÎßå ÏÇ¨Ïö©)
const isAdmin = (user: any) => user?.role === 'admin';

interface WorldCupItem {
  id: string;
  title: string;
  image: string | File;
  description?: string;
}

interface WorldCupData {
  title: string;
  description: string;
  category: string;
  items: WorldCupItem[];
  videoItems: WorldCupMediaItem[];
  isPublic: boolean;
  thumbnail?: string | File;
}

function EditPageContent() {
  const router = useRouter();
  const params = useParams();
  const { user } = useAuth();
  const [currentStep, setCurrentStep] = useState(1);
  const [isPreviewGameActive, setIsPreviewGameActive] = useState(false);
  const [showCelebration, setShowCelebration] = useState(false);
  const [worldCupData, setWorldCupData] = useState<WorldCupData>({
    title: '',
    description: '',
    category: 'entertainment',
    items: [],
    videoItems: [],
    isPublic: true,
    thumbnail: undefined,
  });
  const [activeMediaTab, setActiveMediaTab] = useState<'images' | 'videos'>('images');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const worldcupId = params?.id as string;

  // ÏõîÎìúÏªµ Îç∞Ïù¥ÌÑ∞ Î°úÎìú (Supabase Ïö∞ÏÑ†, localStorage ÎåÄÏ≤¥)
  useEffect(() => {
    const loadWorldCupData = async () => {
      if (!worldcupId || !user) {
        setIsLoading(false);
        return;
      }

      try {
        console.log('üîç Loading worldcup for editing:', worldcupId);
        
        // 1. SupabaseÏóêÏÑú ÏõîÎìúÏªµ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÎèÑ
        let existingWorldCup = await getSupabaseWorldCupById(worldcupId);
        let isFromSupabase = true;
        
        // 2. SupabaseÏóêÏÑú Î™ª Ï∞æÏúºÎ©¥ localStorageÏóêÏÑú ÏãúÎèÑ
        if (!existingWorldCup) {
          console.log('üì± Trying localStorage...');
          existingWorldCup = getWorldCupById(worldcupId);
          isFromSupabase = false;
        }
        
        if (!existingWorldCup) {
          setError('ÏõîÎìúÏªµÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
          return;
        }

        console.log('‚úÖ Found worldcup:', {
          title: existingWorldCup.title,
          author: existingWorldCup.author,
          source: isFromSupabase ? 'Supabase' : 'localStorage'
        });

        // 3. Í∂åÌïú ÌôïÏù∏ (Î≥∏Ïù∏Ïù¥ ÎßåÎì† Í≤ÉÏù¥Í±∞ÎÇò Í¥ÄÎ¶¨ÏûêÏù∏ÏßÄ)
        const { data: { user: authUser } } = await supabase.auth.getUser();
        
        // Supabase Îç∞Ïù¥ÌÑ∞Ïù∏ Í≤ΩÏö∞ author_idÎ°ú ÌôïÏù∏, localStorageÏù∏ Í≤ΩÏö∞ usernameÏúºÎ°ú ÌôïÏù∏
        let hasPermission = false;
        if (isFromSupabase && authUser) {
          // Supabase ÏõîÎìúÏªµÏùò Í≤ΩÏö∞ ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©Ïûê IDÏôÄ ÎπÑÍµê
          const { data: worldcupDetail } = await supabase
            .from('worldcups')
            .select('author_id')
            .eq('id', worldcupId)
            .single();
          
          hasPermission = worldcupDetail?.author_id === authUser.id || isAdmin(user);
        } else {
          // localStorage ÏõîÎìúÏªµÏùò Í≤ΩÏö∞ usernameÏúºÎ°ú ÎπÑÍµê
          hasPermission = existingWorldCup.author === user.username || isAdmin(user);
        }

        if (!hasPermission) {
          setError('Ïù¥ ÏõîÎìúÏªµÏùÑ ÏàòÏ†ïÌï† Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.');
          return;
        }

        // 4. Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Î•º Ìé∏Ïßë Í∞ÄÎä•Ìïú ÌòïÌÉúÎ°ú Î≥ÄÌôò
        // Ïù¥ÎØ∏ÏßÄÏôÄ ÎèôÏòÅÏÉÅ ÏïÑÏù¥ÌÖú Î∂ÑÎ¶¨
        const imageItems: WorldCupItem[] = [];
        const videoItems: WorldCupMediaItem[] = [];

        existingWorldCup.items.forEach((item: any) => {
          if (item.mediaType === 'video') {
            // ÎèôÏòÅÏÉÅ ÏïÑÏù¥ÌÖú
            videoItems.push({
              id: item.id,
              title: item.title,
              videoUrl: item.videoUrl,
              videoId: item.videoId,
              videoStartTime: item.videoStartTime,
              videoEndTime: item.videoEndTime,
              videoThumbnail: item.videoThumbnail,
              videoDuration: item.videoDuration,
              videoMetadata: item.videoMetadata,
              mediaType: 'video' // Ï§ëÏöî: mediaType ÌïÑÎìú Ï∂îÍ∞Ä
            });
          } else {
            // Ïù¥ÎØ∏ÏßÄ ÏïÑÏù¥ÌÖú
            imageItems.push({
              id: item.id,
              title: item.title,
              image: item.image || '',
              description: item.description || '',
            });
          }
        });

        // Ïñ¥Îñ§ ÌÉÄÏûÖÏùò ÏïÑÏù¥ÌÖúÏù¥ Îçî ÎßéÏùÄÏßÄÏóê Îî∞Îùº Í∏∞Î≥∏ ÌÉ≠ ÏÑ§Ï†ï
        let defaultTab: 'images' | 'videos';
        if (videoItems.length > imageItems.length) {
          defaultTab = 'videos';
          console.log(`üì∫ Setting default tab to 'videos' (${videoItems.length} videos > ${imageItems.length} images)`);
        } else if (imageItems.length > videoItems.length) {
          defaultTab = 'images';
          console.log(`üñºÔ∏è Setting default tab to 'images' (${imageItems.length} images > ${videoItems.length} videos)`);
        } else {
          // ÎèôÏùºÌïú Í∞úÏàòÏù¥Í±∞ÎÇò Îëò Îã§ 0Í∞úÏù∏ Í≤ΩÏö∞ Ïù¥ÎØ∏ÏßÄÎ•º Í∏∞Î≥∏ÏúºÎ°ú
          defaultTab = 'images';
          console.log(`‚öñÔ∏è Setting default tab to 'images' (equal count: ${imageItems.length} = ${videoItems.length})`);
        }
        setActiveMediaTab(defaultTab);

        setWorldCupData({
          title: existingWorldCup.title,
          description: existingWorldCup.description || '',
          category: existingWorldCup.category || 'entertainment',
          items: imageItems,
          videoItems: videoItems,
          isPublic: existingWorldCup.isPublic !== false,
          thumbnail: existingWorldCup.thumbnail,
        });

        setIsLoading(false);
        
      } catch (error) {
        console.error('‚ùå Failed to load worldcup:', error);
        setError('ÏõîÎìúÏªµ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        setIsLoading(false);
      }
    };

    loadWorldCupData();
  }, [worldcupId, user]);

  const steps = [
    { id: 1, title: 'Í∏∞Î≥∏ Ï†ïÎ≥¥', icon: Settings },
    { id: 2, title: 'ÏΩòÌÖêÏ∏† ÏóÖÎ°úÎìú', icon: Upload },
    { id: 3, title: 'Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë', icon: Image },
    { id: 4, title: 'ÎØ∏Î¶¨Î≥¥Í∏∞', icon: Play },
  ];

  const handleBack = () => {
    // ÎØ∏Î¶¨Î≥¥Í∏∞ Í≤åÏûÑÏù¥ ÌôúÏÑ±ÌôîÎêú ÏÉÅÌÉúÎ©¥ Í≤åÏûÑÎßå Ï¢ÖÎ£å
    if (isPreviewGameActive) {
      setIsPreviewGameActive(false);
      return;
    }
    
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    } else {
      router.push('/my'); // ÎßàÏù¥ ÌéòÏù¥ÏßÄÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    }
  };

  const handleNext = () => {
    if (currentStep < steps.length) {
      // Ïú†ÌäúÎ∏åÎßå ÏûàÍ≥† Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë Îã®Í≥Ñ(3Îã®Í≥Ñ) Í±¥ÎÑàÎõ∞Í∏∞
      if (currentStep === 2 && worldCupData.items.length === 0 && worldCupData.videoItems.length > 0) {
        setCurrentStep(4); // ÎØ∏Î¶¨Î≥¥Í∏∞Î°ú Î∞îÎ°ú Ïù¥Îèô
      } else {
        setCurrentStep(currentStep + 1);
      }
    }
  };

  const handleItemsUpload = (items: WorldCupItem[]) => {
    setWorldCupData(prev => ({
      ...prev,
      items: [...prev.items, ...items]
    }));
  };

  const handleItemUpdate = (itemId: string, updates: Partial<WorldCupItem>) => {
    setWorldCupData(prev => ({
      ...prev,
      items: prev.items.map(item => 
        item.id === itemId ? { ...item, ...updates } : item
      )
    }));
  };

  const handleItemDelete = (itemId: string) => {
    setWorldCupData(prev => ({
      ...prev,
      items: prev.items.filter(item => item.id !== itemId)
    }));
  };

  const handleThumbnailUpload = (thumbnail: string | File) => {
    setWorldCupData(prev => ({
      ...prev,
      thumbnail: thumbnail
    }));
  };

  // ÎèôÏòÅÏÉÅ ÏïÑÏù¥ÌÖú Ï≤òÎ¶¨ Ìï®Ïàò
  const handleVideosProcessed = (videos: WorldCupMediaItem[]) => {
    setWorldCupData(prev => ({
      ...prev,
      videoItems: [...prev.videoItems, ...videos]
    }));
  };

  const handleVideoItemDelete = (itemId: string) => {
    setWorldCupData(prev => ({
      ...prev,
      videoItems: prev.videoItems.filter(item => item.id !== itemId)
    }));
  };

  const canProceed = () => {
    const totalItems = worldCupData.items.length + worldCupData.videoItems.length;
    
    switch (currentStep) {
      case 1:
        return worldCupData.title.trim() !== '';
      case 2:
        return totalItems >= 4;
      case 3:
        return true;
      case 4:
        return totalItems >= 4;
      default:
        return false;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <TournamentSettings
            data={worldCupData}
            onChange={setWorldCupData}
          />
        );
      case 2:
        return (
          <div className="space-y-6">
            {/* ÎØ∏ÎîîÏñ¥ ÌÉÄÏûÖ ÌÉ≠ */}
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex space-x-8">
                <button
                  onClick={() => setActiveMediaTab('images')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeMediaTab === 'images'
                      ? 'border-emerald-500 text-emerald-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <Image className="w-5 h-5" />
                    <span>Ïù¥ÎØ∏ÏßÄ ({worldCupData.items.length}Í∞ú)</span>
                  </div>
                </button>
                <button
                  onClick={() => setActiveMediaTab('videos')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeMediaTab === 'videos'
                      ? 'border-red-500 text-red-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <Youtube className="w-5 h-5" />
                    <span>YouTube ÎèôÏòÅÏÉÅ ({worldCupData.videoItems.length}Í∞ú)</span>
                  </div>
                </button>
              </nav>
            </div>

            {/* Ï†ÑÏ≤¥ ÏïÑÏù¥ÌÖú Ïàò ÌëúÏãú */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  <span className="text-blue-800 font-medium">
                    Ï¥ù {worldCupData.items.length + worldCupData.videoItems.length}Í∞ú ÏïÑÏù¥ÌÖú
                  </span>
                </div>
                <div className="text-sm text-blue-700">
                  {worldCupData.items.length + worldCupData.videoItems.length >= 4 
                    ? '‚úÖ ÏµúÏÜå Ï°∞Í±¥ Ï∂©Ï°±' 
                    : `‚ö†Ô∏è ${4 - (worldCupData.items.length + worldCupData.videoItems.length)}Í∞ú Îçî ÌïÑÏöî`
                  }
                </div>
              </div>
              <div className="mt-2 text-xs text-blue-600">
                Ïù¥ÎØ∏ÏßÄ {worldCupData.items.length}Í∞ú + ÎèôÏòÅÏÉÅ {worldCupData.videoItems.length}Í∞ú = 
                Ï¥ù {worldCupData.items.length + worldCupData.videoItems.length}Í∞ú (ÏµúÏÜå 4Í∞ú ÌïÑÏöî)
              </div>
            </div>

            {/* ÌÉ≠ ÎÇ¥Ïö© */}
            {activeMediaTab === 'images' ? (
              <DragDropUpload
                items={worldCupData.items}
                onItemsUpload={handleItemsUpload}
                onItemDelete={handleItemDelete}
                thumbnail={worldCupData.thumbnail}
                onThumbnailUpload={handleThumbnailUpload}
              />
            ) : (
              <div className="space-y-6">
                <BulkYouTubeUpload
                  onVideosProcessed={handleVideosProcessed}
                  maxVideos={64}
                  existingVideoIds={worldCupData.videoItems.map(video => video.videoId || '').filter(Boolean)}
                />
                
                {/* Ï∂îÍ∞ÄÎêú ÎèôÏòÅÏÉÅ Î™©Î°ù */}
                {worldCupData.videoItems.length > 0 && (
                  <div className="bg-white border rounded-lg p-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">
                      üé• Ï∂îÍ∞ÄÎêú ÎèôÏòÅÏÉÅ ({worldCupData.videoItems.length}Í∞ú)
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {worldCupData.videoItems.map((video) => (
                        <div key={video.id} className="flex items-start space-x-3 p-3 border rounded-lg">
                          <img
                            src={video.videoThumbnail}
                            alt={video.title}
                            className="w-20 h-15 object-cover rounded"
                          />
                          <div className="flex-1 min-w-0">
                            <h4 className="font-medium text-gray-900 truncate">{video.title}</h4>
                            <p className="text-sm text-gray-500">
                              {video.videoMetadata?.channelTitle}
                            </p>
                            {video.videoStartTime !== undefined && (
                              <p className="text-xs text-blue-600">
                                {formatTimeRange(video.videoStartTime, video.videoEndTime)}
                              </p>
                            )}
                          </div>
                          <button
                            onClick={() => handleVideoItemDelete(video.id)}
                            className="text-red-500 hover:text-red-700"
                          >
                            <X className="w-4 h-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Ïú†ÌäúÎ∏å Ï†ÑÏö© Ïç∏ÎÑ§Ïùº ÏóÖÎ°úÎìú */}
                {worldCupData.videoItems.length > 0 && (
                  <YouTubeThumbnailUpload
                    videoItems={worldCupData.videoItems}
                    thumbnail={worldCupData.thumbnail}
                    onThumbnailUpload={handleThumbnailUpload}
                  />
                )}
              </div>
            )}
          </div>
        );
      case 3:
        return (
          <ImageCropper
            items={worldCupData.items}
            onItemUpdate={handleItemUpdate}
            thumbnail={worldCupData.thumbnail}
            onThumbnailUpdate={handleThumbnailUpload}
          />
        );
      case 4:
        return (
          <WorldCupPreview
            data={worldCupData}
            onGameStateChange={setIsPreviewGameActive}
          />
        );
      default:
        return null;
    }
  };

  // Î°úÎî© Ï§ë
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-emerald-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">ÏõîÎìúÏªµ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
        </div>
      </div>
    );
  }

  // ÏóêÎü¨ ÏÉÅÌÉú
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center max-w-md mx-auto p-8">
          <div className="text-4xl mb-4">‚ùå</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</h1>
          <p className="text-gray-600 mb-6">{error}</p>
          <button
            onClick={() => router.push('/my')}
            className="px-6 py-3 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors font-medium"
          >
            ÎßàÏù¥ ÌéòÏù¥ÏßÄÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={handleBack}
                className="p-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeft className="w-6 h-6" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  ÏõîÎìúÏªµ ÏàòÏ†ï
                </h1>
                <p className="text-gray-600">
                  {worldCupData.title || 'ÏõîÎìúÏªµÏùÑ ÏàòÏ†ïÌï¥Î≥¥ÏÑ∏Ïöî'}
                </p>
              </div>
            </div>
            <div className="text-sm text-gray-500">
              {currentStep} / {steps.length}
            </div>
          </div>
        </div>
      </div>

      {/* Progress Steps */}
      <div className="bg-white border-b">
        <div className="max-w-6xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            {steps.map((step, index) => {
              const Icon = step.icon;
              const isActive = currentStep === step.id;
              const isCompleted = currentStep > step.id;
              const isAccessible = currentStep >= step.id;

              return (
                <div key={step.id} className="flex items-center">
                  <div className="flex flex-col items-center">
                    <div
                      className={`w-12 h-12 rounded-full flex items-center justify-center transition-colors ${
                        isCompleted
                          ? 'bg-emerald-600 text-white'
                          : isActive
                          ? 'bg-emerald-100 text-emerald-600 ring-2 ring-emerald-600'
                          : isAccessible
                          ? 'bg-gray-100 text-gray-600'
                          : 'bg-gray-50 text-gray-400'
                      }`}
                    >
                      <Icon className="w-5 h-5" />
                    </div>
                    <span
                      className={`mt-2 text-sm font-medium ${
                        isActive
                          ? 'text-emerald-600'
                          : isAccessible
                          ? 'text-gray-900'
                          : 'text-gray-400'
                      }`}
                    >
                      {step.title}
                    </span>
                  </div>
                  {index < steps.length - 1 && (
                    <div
                      className={`w-16 h-0.5 mx-4 ${
                        isCompleted ? 'bg-emerald-600' : 'bg-gray-200'
                      }`}
                    />
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-6xl mx-auto px-4 py-8 pb-24">
        <div className="bg-white rounded-lg shadow-sm border p-6">
          {renderStepContent()}
        </div>
      </div>

      {/* Navigation */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <button
              onClick={handleBack}
              className="flex items-center space-x-2 px-6 py-2 bg-blue-50 hover:bg-blue-100 text-blue-700 hover:text-blue-800 rounded-lg border border-blue-200 hover:border-blue-300 transition-colors font-medium"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>{currentStep === 1 ? 'ÎßàÏù¥ÌéòÏù¥ÏßÄÎ°ú' : isPreviewGameActive ? 'ÎØ∏Î¶¨Î≥¥Í∏∞ Ï¢ÖÎ£å' : 'Ïù¥Ï†Ñ'}</span>
            </button>
            <div className="flex space-x-3">
              {currentStep < steps.length ? (
                <button
                  onClick={handleNext}
                  disabled={!canProceed()}
                  className={`flex items-center space-x-2 px-8 py-2 rounded-lg font-medium transition-all duration-200 border ${
                    canProceed()
                      ? 'bg-emerald-600 hover:bg-emerald-700 text-white border-emerald-600 shadow-lg hover:shadow-xl transform hover:scale-105'
                      : 'bg-gray-200 text-gray-400 cursor-not-allowed border-gray-200'
                  }`}
                >
                  <span>Îã§Ïùå</span>
                  <ArrowLeft className="w-4 h-4 rotate-180" />
                </button>
              ) : (
                <button
                  onClick={async () => {
                    const startTime = Date.now();
                    try {
                      console.log('üíæ Starting worldcup update...', {
                        totalItems: worldCupData.items.length + worldCupData.videoItems.length,
                        imageItems: worldCupData.items.length,
                        videoItems: worldCupData.videoItems.length,
                        title: worldCupData.title
                      });
                      
                      // ÏõîÎìúÏªµ ÏàòÏ†ï ÏôÑÎ£å Î°úÏßÅ
                      const finalWorldCupData = { ...worldCupData };
                      
                      // Ïç∏ÎÑ§ÏùºÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÍ±∞ÎÇò ÏÇ≠Ï†úÎêòÏóàÏùÑ Îïå ÏûêÎèô ÏÉùÏÑ±
                      const totalMediaItems = (worldCupData.items?.length || 0) + (worldCupData.videoItems?.length || 0);
                      
                      if ((!worldCupData.thumbnail || worldCupData.thumbnail === null || worldCupData.thumbnail === '') && totalMediaItems >= 2) {
                        try {
                          console.log('üé® Generating auto thumbnail (thumbnail was deleted or empty)...');
                          
                          if (worldCupData.items.length >= 2) {
                            // Ïù¥ÎØ∏ÏßÄ ÏïÑÏù¥ÌÖúÏù¥ 2Í∞ú Ïù¥ÏÉÅÏù∏ Í≤ΩÏö∞ Ïù¥ÎØ∏ÏßÄÎ°ú Ïç∏ÎÑ§Ïùº ÏÉùÏÑ±
                            const autoThumbnail = await generateAutoThumbnail(worldCupData.items);
                            if (autoThumbnail) {
                              finalWorldCupData.thumbnail = autoThumbnail;
                              console.log('‚úÖ Auto thumbnail generated from images');
                            }
                          } else if (worldCupData.videoItems.length >= 2) {
                            // ÎèôÏòÅÏÉÅ ÏïÑÏù¥ÌÖúÎßå ÏûàÎäî Í≤ΩÏö∞ Ï≤´ Î≤àÏß∏ ÎèôÏòÅÏÉÅ Ïç∏ÎÑ§Ïùº ÏÇ¨Ïö©
                            const firstVideoThumbnail = worldCupData.videoItems[0]?.videoThumbnail;
                            if (firstVideoThumbnail) {
                              finalWorldCupData.thumbnail = firstVideoThumbnail;
                              console.log('‚úÖ Auto thumbnail set from first video thumbnail');
                            }
                          }
                        } catch (error) {
                          console.warn('‚ö†Ô∏è ÏûêÎèô Ïç∏ÎÑ§Ïùº ÏÉùÏÑ± Ïã§Ìå®:', error);
                        }
                      }
                      
                      // 1. SupabaseÏóêÏÑú ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÎèÑ - useAuth()Ïùò user ÏßÅÏ†ë ÏÇ¨Ïö©
                      console.log('üîê Using authenticated user from context...', {
                        hasUser: !!user,
                        userId: user?.id,
                        userEmail: user?.email
                      });
                      
                      let supabaseUpdateSuccess = false;
                      
                      if (user) {
                        try {
                          console.log('üì° Checking if worldcup exists in Supabase...', {
                            worldcupId,
                            authUserId: user.id
                          });
                          
                          // Í∂åÌïú Ï≤¥ÌÅ¨ Ïö∞ÌöåÌïòÍ≥† Î∞îÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÎèÑ
                          console.log('üöÄ Skipping permission check, attempting direct update...');
                          
                          try {
                            console.log('üîÑ Updating existing Supabase worldcup with full update...');
                            
                            // ÏôÑÏ†ÑÌïú ÏóÖÎç∞Ïù¥Ìä∏ (Ïù¥ÎØ∏ÏßÄ Ìè¨Ìï®)
                            console.log('üöÄ Calling updateWorldCupInSupabase...');
                            console.log('üìã Data to update:', {
                              title: finalWorldCupData.title,
                              hasItems: !!finalWorldCupData.items,
                              itemsCount: finalWorldCupData.items?.length || 0,
                              hasVideoItems: !!finalWorldCupData.videoItems,
                              videoItemsCount: finalWorldCupData.videoItems?.length || 0,
                              firstVideoItem: finalWorldCupData.videoItems?.[0] ? {
                                id: finalWorldCupData.videoItems[0].id,
                                title: finalWorldCupData.videoItems[0].title,
                                videoId: finalWorldCupData.videoItems[0].videoId
                              } : null
                            });
                            
                            console.log('üîÑ About to call updateWorldCupInSupabase with:', {
                              worldcupId,
                              dataStructure: {
                                title: finalWorldCupData.title,
                                description: finalWorldCupData.description,
                                category: finalWorldCupData.category,
                                isPublic: finalWorldCupData.isPublic,
                                itemsCount: finalWorldCupData.items?.length || 0,
                                videoItemsCount: finalWorldCupData.videoItems?.length || 0,
                                hasThumbnail: !!finalWorldCupData.thumbnail,
                                thumbnailType: typeof finalWorldCupData.thumbnail
                              }
                            });

                            const updateResult = await updateWorldCupInSupabase(worldcupId, finalWorldCupData, user);
                            
                            console.log('üìã Update result received:', updateResult);
                            
                            if (updateResult && updateResult.success) {
                              console.log('‚úÖ Supabase worldcup fully updated');
                              supabaseUpdateSuccess = true;
                            } else {
                              console.error('‚ùå Supabase full update failed:', {
                                result: updateResult,
                                error: updateResult?.error,
                                success: updateResult?.success,
                                resultType: typeof updateResult
                              });
                            }
                          } else {
                            console.log('‚ùå Permission denied or worldcup not found:', {
                              hasWorldcup: !!existingSupabaseWorldCup,
                              worldcupAuthorId: existingSupabaseWorldCup?.author_id,
                              currentUserId: user.id,
                              reason: !existingSupabaseWorldCup ? 'Worldcup not found in Supabase' : 'User is not the author'
                            });
                            console.log('üì± Trying to create new instead...');
                            
                            // SupabaseÏóê ÏÉàÎ°ú Ï†ÄÏû• (localStorageÏóêÏÑú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò)
                            const saveResult = await saveWorldCupToSupabase({
                              ...finalWorldCupData,
                              id: worldcupId // Í∏∞Ï°¥ ID Ïú†ÏßÄ
                            });
                            
                            if (saveResult.success) {
                              console.log('‚úÖ Successfully migrated to Supabase');
                              supabaseUpdateSuccess = true;
                            }
                          } catch (error) {
                            console.error('‚ùå Supabase update/create failed:', error);
                          }
                        } else {
                          console.log('‚ùå No authenticated user, skipping Supabase update');
                        }

                      // 2. localStorage ÏóÖÎç∞Ïù¥Ìä∏ (Supabase Ïã§Ìå®Ïãú ÎòêÎäî Î∞±ÏóÖÏö©)
                      try {
                        const existingWorldCup = getWorldCupById(worldcupId);
                        if (existingWorldCup) {
                          // Ïù¥ÎØ∏ÏßÄÏôÄ ÎèôÏòÅÏÉÅ ÏïÑÏù¥ÌÖúÏùÑ ÌïòÎÇòÏùò Î∞∞Ïó¥Î°ú Ìï©ÏπòÍ∏∞
                          const allItems = [
                            // Ïù¥ÎØ∏ÏßÄ ÏïÑÏù¥ÌÖú
                            ...finalWorldCupData.items.map(item => ({
                              id: item.id,
                              title: item.title,
                              image: typeof item.image === 'string' ? item.image : '',
                              description: item.description,
                              mediaType: 'image'
                            })),
                            // ÎèôÏòÅÏÉÅ ÏïÑÏù¥ÌÖú
                            ...finalWorldCupData.videoItems.map(video => ({
                              id: video.id,
                              title: video.title,
                              image: video.videoThumbnail || '',
                              description: '',
                              mediaType: 'video',
                              videoUrl: video.videoUrl,
                              videoId: video.videoId,
                              videoStartTime: video.videoStartTime,
                              videoEndTime: video.videoEndTime,
                              videoThumbnail: video.videoThumbnail,
                              videoDuration: video.videoDuration,
                              videoMetadata: video.videoMetadata
                            }))
                          ];

                          const updatedWorldCup = {
                            ...existingWorldCup,
                            title: finalWorldCupData.title,
                            description: finalWorldCupData.description,
                            category: finalWorldCupData.category,
                            items: allItems,
                            isPublic: finalWorldCupData.isPublic,
                            thumbnail: typeof finalWorldCupData.thumbnail === 'string' ? finalWorldCupData.thumbnail : '',
                            updatedAt: new Date().toISOString()
                          };

                          // localStorageÏóêÏÑú Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÌõÑ ÏÉàÎ°ú Ï†ÄÏû•
                          const allWorldCups = JSON.parse(localStorage.getItem('worldcups') || '[]');
                          const filteredWorldCups = allWorldCups.filter((wc: { id: string }) => wc.id !== worldcupId);
                          filteredWorldCups.push(updatedWorldCup);
                          localStorage.setItem('worldcups', JSON.stringify(filteredWorldCups));
                          
                          console.log('‚úÖ localStorage updated');
                        }
                      } catch (error) {
                        console.warn('‚ö†Ô∏è localStorage update failed:', error);
                      }
                      
                      if (supabaseUpdateSuccess) {
                        console.log('üéâ Worldcup update completed successfully!');
                      } else {
                        console.log('üì± Worldcup updated in localStorage only');
                      }
                      
                      // Ï∂ïÌïò Î™®Îã¨ ÌëúÏãú
                      setShowCelebration(true);
                    } catch (error) {
                      console.error('‚ùå Failed to update worldcup:', error);
                      
                      // ÏóêÎü¨ Î©îÏãúÏßÄÎ•º Îçî ÏûêÏÑ∏Ìûà ÌëúÏãú
                      let errorMessage = 'ÏõîÎìúÏªµ ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
                      if (error instanceof Error) {
                        errorMessage += `\n\nÏò§Î•ò ÎÇ¥Ïö©: ${error.message}`;
                      }
                      
                      alert(errorMessage + '\n\nÎã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
                    }
                  }}
                  disabled={!canProceed()}
                  className={`flex items-center space-x-2 px-8 py-2 rounded-lg font-medium transition-all duration-200 border ${
                    canProceed()
                      ? 'bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700 text-white border-emerald-600 shadow-lg hover:shadow-xl transform hover:scale-105'
                      : 'bg-gray-200 text-gray-400 cursor-not-allowed border-gray-200'
                  }`}
                >
                  <span>ÏàòÏ†ï ÏôÑÎ£å</span>
                  <Settings className="w-4 h-4" />
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Ï∂ïÌïò Î™®Îã¨ */}
      <TournamentCreationCelebration
        isVisible={showCelebration}
        worldCupData={worldCupData}
        onComplete={() => {
          setShowCelebration(false);
          router.push('/my');
        }}
      />
    </div>
  );
}

export default function EditPage() {
  return (
    <ProtectedRoute>
      <EditPageContent />
    </ProtectedRoute>
  );
}